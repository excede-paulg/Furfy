#!/usr/bin/env node
const arg=require("arg"),packageJson=require("../package.json");function init(){let e=args["--configPath"],s=args["--cssPath"];try{const{tailwindIntellisense:o}=require("./index.cjs");o({tailwindcss:{configPath:e,cssPath:s}})}catch(e){console.log("Pinegrow: Unable to execute tailwindcss plugin"),console.log(e)}}let execCommand={run:init,args:{"--configPath":{type:String,description:"TailwindCSS config file"},"--cssPath":{type:String,description:"CSS file that contains the tailwindcss directives like @tailwind, @layer"}}},sharedFlags={"--help":{type:Boolean,description:"Display usage information"},"-help":"--help","-h":"--help"};process.stdout.isTTY&&Object.keys(sharedFlags).includes(process.argv[2])&&(help({usage:["tailwindcss-plugin [--configPath tailwind.config.js] [--cssPath ./src/index.css]"],options:{...execCommand.args,...sharedFlags}}),process.exit(0)),process.argv[2]&&!process.argv[2].startsWith("-")&&(help({message:`Invalid command: ${process.argv[2]}`,usage:["tailwindcss-plugin [--configPath tailwind.config.js] [--cssPath ./src/index.css]"],options:sharedFlags}),process.exit(1));let{args:flags,run}=execCommand,args=(()=>{try{let e=arg(Object.fromEntries(Object.entries({...flags,...sharedFlags}).filter((([e,s])=>!s?.type?.manualParsing)).map((([e,s])=>[e,"object"==typeof s?s.type:s]))),{permissive:!0});for(let s=e._.length-1;s>=0;--s){let o=e._[s];if(!o.startsWith("-"))continue;let t=o,n=flags[o];for(;"string"==typeof n;)t=n,n=flags[n];if(!n)continue;let i=[],l=s+1;for(;e._[l]&&!e._[l].startsWith("-");)i.push(e._[l++]);e._.splice(s,1+i.length),e[t]=n.type(0===i.length?void 0:1===i.length?i[0]:i,t)}return e}catch(e){throw"ARG_UNKNOWN_OPTION"===e.code&&(help({message:e.message,usage:["tailwindcss-plugin [--configPath tailwind.config.js] [--cssPath ./src/index.css]"],options:sharedFlags}),process.exit(1)),e}})();function help({message:e,usage:s,commands:o,options:t}){if(console.log(),console.log(`${packageJson.name} v${packageJson.version}`),e){console.log();for(let s of e.split("\n"))console.log(s)}if(s&&s.length>0){console.log(),console.log("Usage:");for(let e of s)console.log(" ".repeat(2),e)}if(o&&o.length>0){console.log(),console.log("Commands:");for(let e of o)console.log(" ".repeat(2),e)}if(t){let e={};for(let[s,o]of Object.entries(t))"object"==typeof o?e[s]={...o,flags:[s]}:e[o].flags.push(s);console.log(),console.log("Options:");for(let{flags:s,description:o,deprecated:t}of Object.values(e))t||(1===s.length?console.log(" ".repeat(6),s.slice().reverse().join(", ").padEnd(20," "),o):console.log(" ".repeat(2),s.slice().reverse().join(", ").padEnd(24," "),o))}console.log()}run();